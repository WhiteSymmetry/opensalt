<?php

namespace CftfBundle\Repository;

use CftfBundle\Entity\LsAssociation;
use CftfBundle\Entity\LsDoc;
use Doctrine\ORM\Query;
use Util\Compare;

/**
 * LsDocRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LsDocRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Get a list of all items for an LsDoc
     *
     * @param \CftfBundle\Entity\LsDoc $lsDoc
     *
     * @return array array of LsItems hydrated as an array
     */
    public function findAllChildrenArray(LsDoc $lsDoc)
    {
        $query = $this->getEntityManager()->createQuery('
            SELECT i, t, a, g, adi, add
            FROM CftfBundle:LSItem i INDEX BY i.id
            LEFT JOIN i.itemType t
            LEFT JOIN i.associations a WITH a.lsDoc = :lsDocId AND a.type = :childOfType
            LEFT JOIN a.group g
            LEFT JOIN a.destinationLsItem adi WITH adi.lsDoc = :lsDocId
            LEFT JOIN a.destinationLsDoc add WITH add.id = :lsDocId
            WHERE i.lsDoc = :lsDocId
            ORDER BY i.rank ASC, i.listEnumInSource ASC, i.humanCodingScheme,
                     adi.rank ASC, adi.listEnumInSource ASC, adi.humanCodingScheme
        ');
        $query->setParameter('lsDocId', $lsDoc->getId());
        $query->setParameter('childOfType', LsAssociation::CHILD_OF);

        $results = $query->getResult(Query::HYDRATE_ARRAY);

        foreach ($results as $key => $result) {
            $results[$key]['children'] = [];
        }

        foreach ($results as $key => $result) {
            foreach ($result['associations'] as $association) {
                if (!empty($association['destinationLsItem'])) {
                    $parent = $association['destinationLsItem'];
                    $results[$parent['id']]['children'][] = $result;
                    if (!empty($association['group'])) {
                        //$results[$key]['parents'][$parent['id']][] = ['group' => $association['group']['title']];
                        $results[$key]['assoc'][$parent['id']] = ['id'=>$association['id'], 'sequenceNumber'=>$association['sequenceNumber'], 'group'=>$association['group']['id']];
                    } else {
                        //$results[$key]['parents'][$parent['id']][] = ['group' => $association['groupName']];
                        $results[$key]['assoc'][$parent['id']] = ['id'=>$association['id'], 'sequenceNumber'=>$association['sequenceNumber'], 'group'=>''];
                    }
                } elseif (!empty($association['destinationLsDoc'])) {
                    if (!empty($association['group'])) {
                        // $results[$key]['parents']['doc'][] = ['group' => $association['group']['title']];
                        $results[$key]['assoc']['doc'] = ['id'=>$association['id'], 'sequenceNumber'=>$association['sequenceNumber'], 'group'=>$association['group']['id']];
                    } else {
                        //$results[$key]['parents']['doc'][] = ['group' => $association['groupName']];
                        $results[$key]['assoc']['doc'] = ['id'=>$association['id'], 'sequenceNumber'=>$association['sequenceNumber'], 'group'=>''];
                    }
                }
            }
        }

        $this->rankItems($results);

        foreach ($results as $key => $result) {
            if (!empty($results[$key]['children'])) {
                $this->rankItems($results[$key]['children']);
            }
        }

        return $results;
    }

    /**
     * Rank the items in $itemArray
     *   - by "rank"
     *   - then by "listEnumInSource"
     *   - then by "humanCodingScheme"
     *
     * @param array $itemArray
     */
    private function rankItems(array &$itemArray)
    {
        Compare::sortArrayByFields($itemArray, ['rank', 'listEnumInSource', 'humanCodingScheme']);
    }

    /**
     * Get a list of ids for all items that have parents for an LsDoc
     *
     * @param \CftfBundle\Entity\LsDoc $lsDoc
     *
     * @return array array of LsItem ids
     */
    public function findAllItemsWithParentsArray(LsDoc $lsDoc)
    {
        $query = $this->getEntityManager()->createQuery('
            SELECT i.id
            FROM CftfBundle:LsItem i INDEX by i.id
            JOIN i.associations a WITH a.lsDoc = :lsDocId AND a.type = :childOfType
            LEFT JOIN a.destinationLsItem p WITH p.lsDoc = :lsDocId
            LEFT JOIN a.destinationLsDoc pd WITH pd.id = :lsDocId
            WHERE i.lsDoc = :lsDocId
              AND (p.lsDoc IS NOT NULL OR pd.id IS NOT NULL)
        ');
        $query->setParameter('lsDocId', $lsDoc->getId());
        $query->setParameter('childOfType', LsAssociation::CHILD_OF);
        return $query->getResult(Query::HYDRATE_ARRAY);
    }

    /**
     * Get a list of all items for an LsDoc
     *
     * @param \CftfBundle\Entity\LsDoc $lsDoc
     *
     * @return array array of LsItems hydrated as an array
     */
    public function findTopChildrenIds(LsDoc $lsDoc)
    {
        $query = $this->getEntityManager()->createQuery('
            SELECT i, a, add
            FROM CftfBundle:LSItem i INDEX BY i.id
            JOIN i.associations a WITH a.lsDoc = :lsDocId AND a.type = :childOfType
            JOIN a.destinationLsDoc add WITH add.id = :lsDocId
            WHERE i.lsDoc = :lsDocId
            ORDER BY i.rank ASC, i.listEnumInSource ASC, i.humanCodingScheme ASC
        ');
        $query->setParameter('lsDocId', $lsDoc->getId());
        $query->setParameter('childOfType', LsAssociation::CHILD_OF);

        $results = $query->getResult(Query::HYDRATE_ARRAY);

        $this->rankItems($results);

        return array_keys($results);
    }

    /**
     * Delete an LsDoc and all associated items and associations
     *
     * @param \CftfBundle\Entity\LsDoc $lsDoc
     * @param \Closure|null $progressCallback
     *
     * @throws \Doctrine\DBAL\DBALException
     */
    public function deleteDocument(LsDoc $lsDoc, \Closure $progressCallback = null)
    {
        $conn = $this->getEntityManager()->getConnection();

        $params = ['lsDocId' => $lsDoc->getId()];

        if (null === $progressCallback) {
            $progressCallback = function ($message = '') {
            };
        }

        $progressCallback('Deleting associations');
        $stmt = <<<'xENDx'
DELETE FROM ls_association
 WHERE ls_doc_id = :lsDocId
    OR origin_lsitem_id IN (
      SELECT i.id
        FROM ls_item i
       WHERE i.ls_doc_id = :lsDocId
    )
    OR destination_lsitem_id IN (
      SELECT i.id
        FROM ls_item i
       WHERE i.ls_doc_id = :lsDocId
    )
;
xENDx;
        $conn->prepare($stmt)->execute($params);

        $progressCallback('Deleting items');
        $stmt = <<<'xENDx'
DELETE FROM ls_item
 WHERE ls_doc_id = :lsDocId
;
xENDx;
        $conn->prepare($stmt)->execute($params);

        $progressCallback('Deleting document subjects');
        $stmt = <<<'xENDx'
DELETE FROM ls_doc_subject
 WHERE ls_doc_id = :lsDocId
;
xENDx;
        $conn->prepare($stmt)->execute($params);

        $progressCallback('Deleting acls');
        $stmt = <<<'xENDx'
DELETE FROM salt_user_doc_acl
 WHERE doc_id = :lsDocId
;
xENDx;
        $conn->prepare($stmt)->execute($params);

        $progressCallback('Deleting document');
        $stmt = <<<'xENDx'
DELETE FROM ls_doc
 WHERE id = :lsDocId
;
xENDx;
        $conn->prepare($stmt)->execute($params);

        $progressCallback('Done');
    }

    /**
     * Get a list of all items for an LsDoc
     *
     * @param \CftfBundle\Entity\LsDoc $lsDoc
     *
     * @return array array of LsItems hydrated as an array
     */
    public function findAllItems(LsDoc $lsDoc)
    {
        $query = $this->getEntityManager()->createQuery('
            SELECT i, t, a, adi, add
            FROM CftfBundle:LSItem i INDEX BY i.id
            LEFT JOIN i.itemType t
            LEFT JOIN i.associations a WITH a.lsDoc = :lsDocId
            LEFT JOIN a.destinationLsItem adi WITH adi.lsDoc = :lsDocId
            LEFT JOIN a.destinationLsDoc add WITH add.id = :lsDocId
            WHERE i.lsDoc = :lsDocId
            ORDER BY i.rank ASC, i.listEnumInSource ASC, i.humanCodingScheme,
                     adi.rank ASC, adi.listEnumInSource ASC, adi.humanCodingScheme
        ');
        $query->setParameter('lsDocId', $lsDoc->getId());

        $results = $query->getResult(Query::HYDRATE_ARRAY);

        return $results;
    }

    /**
     * Get a list of all associations for an LsDoc
     *
     * @param \CftfBundle\Entity\LsDoc $lsDoc
     *
     * @return array array of LsAssociations hydrated as an array
     */
    public function findAllAssociations(LsDoc $lsDoc)
    {
        $query = $this->getEntityManager()->createQuery('
            SELECT a, ag, adi, add
            FROM CftfBundle:LSAssociation a INDEX BY a.id
            LEFT JOIN a.group ag
            LEFT JOIN a.destinationLsItem adi WITH adi.lsDoc = :lsDocId
            LEFT JOIN a.destinationLsDoc add WITH add.id = :lsDocId
            WHERE a.lsDoc = :lsDocId
        ');
        $query->setParameter('lsDocId', $lsDoc->getId());

        $results = $query->getResult(Query::HYDRATE_ARRAY);

        return $results;
    }

    /**
     * Get a list of all associations for an LsDoc where the nodes are known items
     *
     * @param \CftfBundle\Entity\LsDoc $lsDoc
     *
     * @return array array of LsAssociations hydrated as an array
     */
    public function findAllAssociationsForCapturedNodes(LsDoc $lsDoc)
    {
        $query = $this->getEntityManager()->createQuery('
            SELECT a, ag, adi, add, odi, odd
            FROM CftfBundle:LSAssociation a INDEX BY a.id
            LEFT JOIN a.group ag
            LEFT JOIN a.originLsItem odi WITH odi.lsDoc = :lsDocId
            LEFT JOIN a.originLsDoc odd WITH odd.id = :lsDocId
            LEFT JOIN a.destinationLsItem adi WITH adi.lsDoc = :lsDocId
            LEFT JOIN a.destinationLsDoc add WITH add.id = :lsDocId
            WHERE a.lsDoc = :lsDocId
              AND (odi.id IS NOT NULL OR odd.id IS NOT NULL)
              AND (adi.id IS NOT NULL OR add.id IS NOT NULL)
        ');
        $query->setParameter('lsDocId', $lsDoc->getId());

        $results = $query->getResult(Query::HYDRATE_ARRAY);

        return $results;
    }
}
